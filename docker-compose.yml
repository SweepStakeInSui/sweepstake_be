services:
  redis:
    image: redis:latest
    restart: unless-stopped
    container_name: sweepstake-redis
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes: 
      - redis_data:/data
  mysql:
    image: mysql:latest
    restart: unless-stopped
    container_name: sweepstake-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
    volumes:
      - mysql_data:/var/lib/mysql
  kafka:
    image: bitnami/kafka:latest
    restart: unless-stopped
    container_name: sweepstake-kafka
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9001:9000"
    environment:
      KAFKA_BROKERCONNECT: "sweepstake-kafka:9092"
    depends_on:
      - "kafka"
  api:
    build:
      context: .
    depends_on:
      - redis
      - mysql
      - kafka
    restart: unless-stopped
    container_name: sweepstake-be
    command: sh -c "yarn start:prod"
    tty: true
    ports:
      - "${HOST}:${PORT}:${PORT}"
    volumes:
      - image_data: /app/uploads
volumes:
  redis_data:
  mysql_data:
  kafka_data:
  image_data:
